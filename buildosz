#!/bin/sh
CWD=$(temp="$(realpath $0)" && dirname "${temp}")
PROJECT_NAME=os
TARGET_NAME=riscv32
TARGET_OS=freestanding
TARGET_ABI=none
TARGET_CPU=generic_rv32

BUILD_MODE=ReleaseFast
BUILD_STRIP=1
BUILD_SINGLE_THREADED=1
BUILD_PIE=
BUILD_PIC=
BUILD_LTO=1

LINK_NOSTDLIB=

build_compile_opts () {
    if [ -z $TARGET_NAME ] ; then TARGET_NAME=riscv32 ; fi
    if [ -z $TARGET_OS ] ; then TARGET_OS=freestanding ; fi
    if [ -z $TARGET_ABI ] ; then TARGET_ABI=none ; fi
    local RET="-target $TARGET_NAME-$TARGET_OS-$TARGET_ABI"
    
    if [ -z $TARGET_CPU ] ; then TARGET_CPU=generic_rv32 ; fi
    RET="$RET -mcpu $TARGET_CPU"
    
    if [ -z $BUILD_MODE ] ; then BUILD_MODE=ReleaseSmall ; fi
    RET="$RET -O $BUILD_MODE"

    if [ -n $BUILD_STRIP ] ; then RET="$RET --strip" ; fi

    if [ -n $BUILD_SINGLE_THREADED ] ; then RET="$RET -fsingle-threaded" ; fi

    if [ -z $BUILD_PIE ] ; then RET="$RET -fno-PIE" ; else RET="$RET -fPIE" ; fi
    if [ -z $BUILD_PIC ] ; then RET="$RET -fno-PIC" ; else RET="$RET -fPIC" ; fi
    if [ -z $BUILD_LTO ] ; then RET="$RET -fno-lto" ; else RET="$RET -flto" ; fi

    echo "$RET"
}

build_linker_opts () {
    local RET
    if [ -n $LINK_NOSTDLIB ] ; then RET="$RET -nostdlib" ; fi
}

find_source_files () {
    if [ -z $1 ] ; then return 1 ; fi
    echo $(cd $1 && echo $(find . -path ./zig-cache -prune -o -type f \( -name '*.zig' -o -name '*.S' -o -name '*.s' -o -name '*.C' -o -name '*.cxx' -o -name '*.cpp' -o -name '*.cc' -o -name '*.cu' -o -name '*.c' -o -name '*.bc' -o -name '*.stub' -o -name '*.m' -o -name '*.mm' \) -print))
}

find_object_files () {
    if [ -z $1 ] ; then return 1 ; fi
    find $1 -type f \( -name '*.o' -o -name '*.obj' -o -name '*.lib' -o -name '*.a' -o -name '*.so' -o -name '*.dll' -o -name '*.dylib' -o -name '*.tbd' \)
}

build () {
    COMPILE_OPTS=$(build_compile_opts)
    LINKER_OPTS=$(build_linker_opts)
    
    APP_DIR="${CWD}/${PROJECT_NAME}"
    BUILD_DIR="${CWD}/build/${PROJECT_NAME}-rv32i"
    LINK_SCRIPT="${APP_DIR}/link.lds"
    STDLIB_INCLUDE=${APP_DIR}/stdlib/include
    OUTPUT_ELF_PATH="${BUILD_DIR}/${PROJECT_NAME}"
    OUTPUT_BIN_PATH=${OUTPUT_ELF_PATH}.bin
    SRAM_PATH="${CWD}/lua/sram.dat"
    OUTPUT_FILE_OPTION="-femit-bin="
    COMPILE="zig build-obj ${COMPILE_OPTS} -I${STDLIB_INCLUDE}"
    LINK="ld.lld -T ${LINK_SCRIPT} ${LINKER_OPTS} -o ${OUTPUT_ELF_PATH}"
    EXPORT_BINARY="llvm-objcopy -O binary ${OUTPUT_ELF_PATH} ${OUTPUT_BIN_PATH}"
    
    rm -rf "${BUILD_DIR}"
    mkdir -p "${BUILD_DIR}"
    
    for fname in $(find_source_files $APP_DIR)
    do
        dname="${BUILD_DIR}/${fname%.*}.o"
        mkdir -p "${dname%/*}"
        dname=$(realpath ${dname})
        fname="$(realpath ${APP_DIR}/${fname})"
        echo "compile: ${fname}"
        if ! ${COMPILE} ${OUTPUT_FILE_OPTION}"${dname}" ${fname}
        then
            return 1
        fi
    done
    echo
    
    echo "link:    ${OUTPUT_ELF_PATH}" 
    if ! ${LINK} $(find_object_files $BUILD_DIR) ; then return 1 ; fi
    echo "export:  ${OUTPUT_BIN_PATH}"
    if ! ${EXPORT_BINARY} ; then return 1 ; fi
    echo
    echo "replace: ${SRAM_PATH}"
    rm -rf ${SRAM_PATH}
    mkdir -p ${SRAM_PATH%/*}
    cp "${OUTPUT_BIN_PATH}" "${SRAM_PATH}"
}

build $@

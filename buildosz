#!/bin/sh
CWD=$(temp="$(realpath $0)" && dirname "${temp}")

APP_DIR="${CWD}/os"
OUTPUT_NAME="os"
BUILD_DIR="${CWD}/build/${OUTPUT_NAME}-rv32i"

APP_FILES="main.c"
LINK_SCRIPT="${APP_DIR}/link.lds"
ZIG_OPTS="-target riscv32-freestanding-none -mcpu generic_rv32 -O ReleaseFast -fomit-frame-pointer --strip -fsingle-threaded"
LD_OPTS="-nostdlib"

STDLIB_SRC=${APP_DIR}/stdlib
STDLIB_OUT=${BUILD_DIR}/stdlib
STDLIB_INCLUDE=${STDLIB_SRC}/include
OUTPUT_ELF_PATH="${BUILD_DIR}/${OUTPUT_NAME}"
OUTPUT_BIN_PATH=${OUTPUT_ELF_PATH}.bin

rm -rf "${BUILD_DIR}"
mkdir -p "${BUILD_DIR}"

PREPROCESS="zig cc -E -"
COMPILE="zig build-obj ${ZIG_OPTS} -I${STDLIB_INCLUDE}"
OUTPUT_FILE_OPTION="-femit-bin="
LINK="ld.lld -T ${LINK_SCRIPT} ${LD_OPTS} -o ${OUTPUT_ELF_PATH}"
EXPORT_BINARY="llvm-objcopy -O binary ${OUTPUT_ELF_PATH} ${OUTPUT_BIN_PATH}"

COMPILE_FILES="$(cd ${APP_DIR} && echo $(find . -path ./zig-cache -prune -o -type f \( -name '*.zig' -o -name '*.S' -o -name '*.s' -o -name '*.C' -o -name '*.cxx' -o -name '*.cpp' -o -name '*.cc' -o -name '*.cu' -o -name '*.c' -o -name '*.bc' -o -name '*.stub' -o -name '*.m' -o -name '*.mm' \) -print))"

for fname in ${COMPILE_FILES}
do
    dname="${BUILD_DIR}/${fname%.*}.o"
    fname="${APP_DIR}/${fname}"
    mkdir -p "${dname%/*}"
    dname=$(realpath ${dname})
    fname=$(realpath ${fname})
    echo "compile: ${fname}"
    ${COMPILE} ${OUTPUT_FILE_OPTION}"${dname}" ${fname}
done
echo

echo "link:    ${OUTPUT_ELF_PATH}"
${LINK} $(find ${BUILD_DIR} -type f \( -name '*.o' -o -name '*.obj' -o -name '*.lib' -o -name '*.a' -o -name '*.so' -o -name '*.dll' -o -name '*.dylib' -o -name '*.tbd' \))
echo "export:  ${OUTPUT_BIN_PATH}"
${EXPORT_BINARY}
echo

SRAM_PATH="${CWD}/lua/sram.dat"
echo "replace: ${SRAM_PATH}"
rm -rf ${SRAM_PATH} && cp "${OUTPUT_BIN_PATH}" "${SRAM_PATH}"

const std = @import("std");

const swidth  :i8= 3;
const bwidth : i8 = swidth * swidth;
const bsize : i8 = bwidth * bwidth;

pub fn range(len: usize) []const u0 {
    return @as([*]u0, undefined)[0..len];
}

pub fn solve(grid : [*]i8) bool {
    var g = [_]i8{0}**bsize;
    var submarks = [_]i8{0}**(bwidth+1);
    submarks[0] = 0;
    var mark = [_]i8{0}**(bwidth + 1);
    mark[0] = 0;
    for (grid[0..bsize])|b,i|{g[i]=b;}
    var subindex :i8 = -1;
    var subcount : i8 = bwidth + 1;
    while (true){
        var subs : i8 = 0;
        for (range(bsize))|_,cell|{
            var r:i8 = @intCast(i8, cell / bwidth * bwidth);
            var c:i8 = @intCast(i8, cell % bwidth);
            var s:i8 = (@divTrunc(r, (swidth * bwidth)) * (swidth * bwidth)) + (@divTrunc(c, swidth) * swidth);
            for (mark[0..bwidth+1])|_,i|{mark[i]=1;}
            for (range(swidth))|_|{
                for (range(swidth))|_| {
                    mark[@intCast(usize, g[@intCast(usize, r)])] = 0;
                    mark[@intCast(usize, g[@intCast(usize, c)])] = 0;
                    mark[@intCast(usize, g[@intCast(usize, s)])] = 0;
                    r+=1;
                    c+=bwidth;
                    s+=1;
                }
                s += bwidth - swidth;
            }
            var val :i8=0;
            var count:i8=0;
            for (range(bwidth))|_,i|{
                if (mark[i+1] != 0) {
                    count+=1;
                    val = @intCast(i8, i+1);
                }
            }
            if (count == 0)
                return false;
            if (count == 1) {
                subs+=1;
                g[cell] = val;
            } else {
                subindex = @intCast(i8, cell);
                subcount = count;
                for (mark[0..bwidth+1])|_,i|{submarks[i]=mark[i];}
            }
        }
        if ((subs == 0) or (subindex == 0))
            break;
    }
    if (subindex < 0){
        for (g[0..bsize])|b,i|{grid[i]=b;}
        return true;
    }
    return false;
}

pub export fn main() void {
    var puzzle = [_]i8{0, 1, 3, 5, 0, 0, 4, 2, 0, 0, 8, 7, 0, 0, 4, 0, 0,
                   0, 0, 0, 4, 0, 7, 9, 6, 0, 3, 0, 6, 2, 0, 4, 0, 5,
                   0, 8, 0, 0, 0, 0, 5, 0, 1, 0, 2, 0, 3, 8, 0, 9, 1,
                   0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 0, 0, 7, 0, 0, 8, 1,
                   5, 0, 0, 9, 8, 9, 1, 0, 0, 7, 2, 5, 0};
    _ = solve(&puzzle);
}
